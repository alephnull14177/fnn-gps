// ==============================================================
// Generated by Vitis HLS v2023.2.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gps_translation_hls_atoi_w_len_Pipeline_VITIS_LOOP_8_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s,
        n,
        res_out,
        res_out_ap_vld,
        is_neg_out,
        is_neg_out_ap_vld,
        stored_msg_address0,
        stored_msg_ce0,
        stored_msg_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] s;
input  [2:0] n;
output  [31:0] res_out;
output   res_out_ap_vld;
output  [0:0] is_neg_out;
output   is_neg_out_ap_vld;
output  [6:0] stored_msg_address0;
output   stored_msg_ce0;
input  [7:0] stored_msg_q0;

reg ap_idle;
reg res_out_ap_vld;
reg is_neg_out_ap_vld;
reg stored_msg_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln8_fu_147_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] is_neg_reg_95;
reg   [2:0] i_3_reg_247;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln8_1_fu_135_p2;
reg   [0:0] icmp_ln8_1_reg_257;
wire   [0:0] is_neg_1_fu_212_p2;
wire    ap_loop_init;
wire   [63:0] zext_ln8_1_fu_130_p1;
reg   [31:0] res_fu_48;
wire   [31:0] res_2_fu_204_p3;
reg   [2:0] i_fu_52;
wire   [2:0] add_ln8_1_fu_152_p2;
reg   [2:0] ap_sig_allocacmp_i_3;
wire   [6:0] zext_ln8_fu_120_p1;
wire   [6:0] add_ln8_fu_124_p2;
wire  signed [7:0] icmp_ln8_fu_141_p0;
wire   [0:0] icmp_ln8_fu_141_p2;
wire  signed [7:0] icmp_ln9_fu_160_p0;
wire  signed [7:0] sext_ln13_fu_178_p0;
wire  signed [8:0] sext_ln13_fu_178_p1;
wire   [8:0] add_ln13_1_fu_182_p2;
wire   [31:0] shl_ln13_fu_166_p2;
wire  signed [31:0] sext_ln13_1_fu_188_p1;
wire   [31:0] add_ln13_fu_192_p2;
wire   [31:0] shl_ln13_1_fu_172_p2;
wire   [0:0] icmp_ln9_fu_160_p2;
wire   [31:0] res_1_fu_198_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 res_fu_48 = 32'd0;
#0 i_fu_52 = 3'd0;
#0 ap_done_reg = 1'b0;
end

gps_translation_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_52 <= 3'd0;
    end else if (((1'd1 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_52 <= add_ln8_1_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        is_neg_reg_95 <= 1'd0;
    end else if (((1'd1 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        is_neg_reg_95 <= is_neg_1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        res_fu_48 <= 32'd0;
    end else if (((1'd1 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        res_fu_48 <= res_2_fu_204_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_3_reg_247 <= ap_sig_allocacmp_i_3;
        icmp_ln8_1_reg_257 <= icmp_ln8_1_fu_135_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        is_neg_out_ap_vld = 1'b1;
    end else begin
        is_neg_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln8_fu_147_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        res_out_ap_vld = 1'b1;
    end else begin
        res_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        stored_msg_ce0 = 1'b1;
    end else begin
        stored_msg_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_1_fu_182_p2 = ($signed(sext_ln13_fu_178_p1) + $signed(9'd464));

assign add_ln13_fu_192_p2 = ($signed(shl_ln13_fu_166_p2) + $signed(sext_ln13_1_fu_188_p1));

assign add_ln8_1_fu_152_p2 = (i_3_reg_247 + 3'd1);

assign add_ln8_fu_124_p2 = (zext_ln8_fu_120_p1 + s);

assign and_ln8_fu_147_p2 = (icmp_ln8_fu_141_p2 & icmp_ln8_1_reg_257);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln8_1_fu_135_p2 = ((ap_sig_allocacmp_i_3 < n) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_141_p0 = stored_msg_q0;

assign icmp_ln8_fu_141_p2 = ((icmp_ln8_fu_141_p0 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_160_p0 = stored_msg_q0;

assign icmp_ln9_fu_160_p2 = ((icmp_ln9_fu_160_p0 == 8'd45) ? 1'b1 : 1'b0);

assign is_neg_1_fu_212_p2 = (is_neg_reg_95 | icmp_ln9_fu_160_p2);

assign is_neg_out = is_neg_reg_95;

assign res_1_fu_198_p2 = (add_ln13_fu_192_p2 + shl_ln13_1_fu_172_p2);

assign res_2_fu_204_p3 = ((icmp_ln9_fu_160_p2[0:0] == 1'b1) ? res_fu_48 : res_1_fu_198_p2);

assign res_out = res_fu_48;

assign sext_ln13_1_fu_188_p1 = $signed(add_ln13_1_fu_182_p2);

assign sext_ln13_fu_178_p0 = stored_msg_q0;

assign sext_ln13_fu_178_p1 = sext_ln13_fu_178_p0;

assign shl_ln13_1_fu_172_p2 = res_fu_48 << 32'd1;

assign shl_ln13_fu_166_p2 = res_fu_48 << 32'd3;

assign stored_msg_address0 = zext_ln8_1_fu_130_p1;

assign zext_ln8_1_fu_130_p1 = add_ln8_fu_124_p2;

assign zext_ln8_fu_120_p1 = ap_sig_allocacmp_i_3;

endmodule //gps_translation_hls_atoi_w_len_Pipeline_VITIS_LOOP_8_1

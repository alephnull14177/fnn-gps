-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gps_translation_hls_get_coordinate_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stored_msg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    stored_msg_ce0 : OUT STD_LOGIC;
    stored_msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_792_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_792_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_792_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_792_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_792_p_ce : OUT STD_LOGIC;
    grp_fu_796_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_796_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_796_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_796_p_ce : OUT STD_LOGIC;
    grp_fu_800_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_800_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_800_p_ce : OUT STD_LOGIC );
end;


architecture behav of gps_translation_hls_get_coordinate_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_47C35000 : STD_LOGIC_VECTOR (31 downto 0) := "01000111110000110101000000000000";
    constant ap_const_lv32_42700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010011100000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv8_45 : STD_LOGIC_VECTOR (7 downto 0) := "01000101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_hls_get_field_from_nmea_fu_45_ap_return : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_95 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_hls_atoi_w_len_fu_54_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln94_fu_106_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln94_reg_145 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln95_fu_113_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln95_reg_155 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_hls_get_field_from_nmea_fu_45_ap_start : STD_LOGIC;
    signal grp_hls_get_field_from_nmea_fu_45_ap_done : STD_LOGIC;
    signal grp_hls_get_field_from_nmea_fu_45_ap_idle : STD_LOGIC;
    signal grp_hls_get_field_from_nmea_fu_45_ap_ready : STD_LOGIC;
    signal grp_hls_get_field_from_nmea_fu_45_fieldnum : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_hls_get_field_from_nmea_fu_45_stored_msg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hls_get_field_from_nmea_fu_45_stored_msg_ce0 : STD_LOGIC;
    signal grp_hls_atoi_w_len_fu_54_ap_start : STD_LOGIC;
    signal grp_hls_atoi_w_len_fu_54_ap_done : STD_LOGIC;
    signal grp_hls_atoi_w_len_fu_54_ap_idle : STD_LOGIC;
    signal grp_hls_atoi_w_len_fu_54_ap_ready : STD_LOGIC;
    signal grp_hls_atoi_w_len_fu_54_s : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hls_atoi_w_len_fu_54_n : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_hls_atoi_w_len_fu_54_stored_msg_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_hls_atoi_w_len_fu_54_stored_msg_ce0 : STD_LOGIC;
    signal grp_hls_get_field_from_nmea_fu_45_ap_start_reg : STD_LOGIC := '0';
    signal grp_hls_atoi_w_len_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln69_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal deg_2_fu_69_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_73_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_73_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_79_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln99_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_65_ce : STD_LOGIC;
    signal deg_2_fu_69_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_79_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gps_translation_hls_get_field_from_nmea IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fieldnum : IN STD_LOGIC_VECTOR (3 downto 0);
        stored_msg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        stored_msg_ce0 : OUT STD_LOGIC;
        stored_msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component gps_translation_hls_atoi_w_len IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s : IN STD_LOGIC_VECTOR (6 downto 0);
        n : IN STD_LOGIC_VECTOR (2 downto 0);
        stored_msg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        stored_msg_ce0 : OUT STD_LOGIC;
        stored_msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gps_translation_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gps_translation_fmul_32ns_32ns_32_1_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gps_translation_fdiv_32ns_32ns_32_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gps_translation_sitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_hls_get_field_from_nmea_fu_45 : component gps_translation_hls_get_field_from_nmea
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hls_get_field_from_nmea_fu_45_ap_start,
        ap_done => grp_hls_get_field_from_nmea_fu_45_ap_done,
        ap_idle => grp_hls_get_field_from_nmea_fu_45_ap_idle,
        ap_ready => grp_hls_get_field_from_nmea_fu_45_ap_ready,
        fieldnum => grp_hls_get_field_from_nmea_fu_45_fieldnum,
        stored_msg_address0 => grp_hls_get_field_from_nmea_fu_45_stored_msg_address0,
        stored_msg_ce0 => grp_hls_get_field_from_nmea_fu_45_stored_msg_ce0,
        stored_msg_q0 => stored_msg_q0,
        ap_return => grp_hls_get_field_from_nmea_fu_45_ap_return);

    grp_hls_atoi_w_len_fu_54 : component gps_translation_hls_atoi_w_len
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hls_atoi_w_len_fu_54_ap_start,
        ap_done => grp_hls_atoi_w_len_fu_54_ap_done,
        ap_idle => grp_hls_atoi_w_len_fu_54_ap_idle,
        ap_ready => grp_hls_atoi_w_len_fu_54_ap_ready,
        s => grp_hls_atoi_w_len_fu_54_s,
        n => grp_hls_atoi_w_len_fu_54_n,
        stored_msg_address0 => grp_hls_atoi_w_len_fu_54_stored_msg_address0,
        stored_msg_ce0 => grp_hls_atoi_w_len_fu_54_stored_msg_ce0,
        stored_msg_q0 => stored_msg_q0,
        ap_return => grp_hls_atoi_w_len_fu_54_ap_return);

    fmul_32ns_32ns_32_1_max_dsp_1_U26 : component gps_translation_fmul_32ns_32ns_32_1_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_100,
        din1 => deg_2_fu_69_p1,
        dout => deg_2_fu_69_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_return_preg <= deg_2_fu_69_p2;
                end if; 
            end if;
        end if;
    end process;


    grp_hls_atoi_w_len_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hls_atoi_w_len_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_hls_atoi_w_len_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hls_atoi_w_len_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_hls_atoi_w_len_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hls_get_field_from_nmea_fu_45_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hls_get_field_from_nmea_fu_45_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_hls_get_field_from_nmea_fu_45_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hls_get_field_from_nmea_fu_45_ap_ready = ap_const_logic_1)) then 
                    grp_hls_get_field_from_nmea_fu_45_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln94_reg_145 <= add_ln94_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln95_reg_155 <= add_ln95_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_100 <= grp_fu_792_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_84 <= grp_hls_get_field_from_nmea_fu_45_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_89 <= grp_fu_800_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_95 <= grp_fu_796_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_1_reg_150 <= grp_hls_atoi_w_len_fu_54_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_reg_140 <= grp_hls_atoi_w_len_fu_54_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_hls_get_field_from_nmea_fu_45_ap_done, grp_hls_atoi_w_len_fu_54_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln94_fu_106_p2 <= std_logic_vector(unsigned(reg_84) + unsigned(ap_const_lv7_3));
    add_ln95_fu_113_p2 <= std_logic_vector(unsigned(reg_84) + unsigned(ap_const_lv7_6));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state18_blk_assign_proc : process(grp_hls_get_field_from_nmea_fu_45_ap_done)
    begin
        if ((grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_hls_get_field_from_nmea_fu_45_ap_done)
    begin
        if ((grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_hls_atoi_w_len_fu_54_ap_done)
    begin
        if ((grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_hls_atoi_w_len_fu_54_ap_done)
    begin
        if ((grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_hls_atoi_w_len_fu_54_ap_done)
    begin
        if ((grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state20, deg_2_fu_69_p2, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_return <= deg_2_fu_69_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    deg_2_fu_69_p1 <= 
        ap_const_lv32_3F800000 when (icmp_ln99_fu_125_p2(0) = '1') else 
        ap_const_lv32_BF800000;

    grp_fu_65_ce_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state19, grp_hls_get_field_from_nmea_fu_45_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_1)))) then 
            grp_fu_65_ce <= ap_const_logic_1;
        else 
            grp_fu_65_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_73_p0_assign_proc : process(reg_89, reg_100, ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_73_p0 <= reg_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_73_p0 <= reg_89;
        else 
            grp_fu_73_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_73_p1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_73_p1 <= ap_const_lv32_42700000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_73_p1 <= ap_const_lv32_47C35000;
        else 
            grp_fu_73_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_792_p_ce <= grp_fu_65_ce;
    grp_fu_792_p_din0 <= grp_fu_800_p_dout0;
    grp_fu_792_p_din1 <= reg_95;
    grp_fu_792_p_opcode <= ap_const_lv2_0;
    grp_fu_796_p_ce <= ap_const_logic_1;
    grp_fu_796_p_din0 <= grp_fu_73_p0;
    grp_fu_796_p_din1 <= grp_fu_73_p1;

    grp_fu_79_ce_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state8, grp_hls_get_field_from_nmea_fu_45_ap_done, grp_hls_atoi_w_len_fu_54_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_hls_get_field_from_nmea_fu_45_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_hls_atoi_w_len_fu_54_ap_done = ap_const_logic_1)))) then 
            grp_fu_79_ce <= ap_const_logic_1;
        else 
            grp_fu_79_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_79_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, grp_hls_atoi_w_len_fu_54_ap_return, tmp_reg_140, tmp_1_reg_150, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_79_p0 <= tmp_reg_140;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_79_p0 <= tmp_1_reg_150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_79_p0 <= grp_hls_atoi_w_len_fu_54_ap_return;
        else 
            grp_fu_79_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_800_p_ce <= grp_fu_79_ce;
    grp_fu_800_p_din0 <= grp_fu_79_p0;
    grp_hls_atoi_w_len_fu_54_ap_start <= grp_hls_atoi_w_len_fu_54_ap_start_reg;

    grp_hls_atoi_w_len_fu_54_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_hls_atoi_w_len_fu_54_n <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_hls_atoi_w_len_fu_54_n <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_hls_atoi_w_len_fu_54_n <= ap_const_lv3_3;
        else 
            grp_hls_atoi_w_len_fu_54_n <= "XXX";
        end if; 
    end process;


    grp_hls_atoi_w_len_fu_54_s_assign_proc : process(reg_84, ap_CS_fsm_state4, add_ln94_reg_145, ap_CS_fsm_state6, add_ln95_reg_155, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_hls_atoi_w_len_fu_54_s <= add_ln95_reg_155;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_hls_atoi_w_len_fu_54_s <= add_ln94_reg_145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_hls_atoi_w_len_fu_54_s <= reg_84;
        else 
            grp_hls_atoi_w_len_fu_54_s <= "XXXXXXX";
        end if; 
    end process;

    grp_hls_get_field_from_nmea_fu_45_ap_start <= grp_hls_get_field_from_nmea_fu_45_ap_start_reg;

    grp_hls_get_field_from_nmea_fu_45_fieldnum_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_hls_get_field_from_nmea_fu_45_fieldnum <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_hls_get_field_from_nmea_fu_45_fieldnum <= ap_const_lv4_5;
        else 
            grp_hls_get_field_from_nmea_fu_45_fieldnum <= "XXXX";
        end if; 
    end process;

    icmp_ln99_fu_125_p2 <= "1" when (stored_msg_q0 = ap_const_lv8_45) else "0";

    stored_msg_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_hls_get_field_from_nmea_fu_45_stored_msg_address0, grp_hls_atoi_w_len_fu_54_stored_msg_address0, zext_ln69_fu_120_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            stored_msg_address0 <= zext_ln69_fu_120_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stored_msg_address0 <= grp_hls_atoi_w_len_fu_54_stored_msg_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stored_msg_address0 <= grp_hls_get_field_from_nmea_fu_45_stored_msg_address0;
        else 
            stored_msg_address0 <= "XXXXXXX";
        end if; 
    end process;


    stored_msg_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_hls_get_field_from_nmea_fu_45_stored_msg_ce0, grp_hls_atoi_w_len_fu_54_stored_msg_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            stored_msg_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stored_msg_ce0 <= grp_hls_atoi_w_len_fu_54_stored_msg_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stored_msg_ce0 <= grp_hls_get_field_from_nmea_fu_45_stored_msg_ce0;
        else 
            stored_msg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln69_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_84),64));
end behav;

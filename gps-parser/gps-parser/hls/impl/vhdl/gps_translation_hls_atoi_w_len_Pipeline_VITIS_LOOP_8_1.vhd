-- ==============================================================
-- Generated by Vitis HLS v2023.2.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gps_translation_hls_atoi_w_len_Pipeline_VITIS_LOOP_8_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s : IN STD_LOGIC_VECTOR (6 downto 0);
    n : IN STD_LOGIC_VECTOR (2 downto 0);
    res_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_out_ap_vld : OUT STD_LOGIC;
    is_neg_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    is_neg_out_ap_vld : OUT STD_LOGIC;
    stored_msg_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    stored_msg_ce0 : OUT STD_LOGIC;
    stored_msg_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of gps_translation_hls_atoi_w_len_Pipeline_VITIS_LOOP_8_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_1D0 : STD_LOGIC_VECTOR (8 downto 0) := "111010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln8_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal is_neg_reg_95 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_247 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln8_1_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_1_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_neg_1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln8_1_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_fu_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal res_2_fu_204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln8_1_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln8_fu_120_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_fu_124_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln8_fu_141_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln8_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_fu_160_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln13_fu_178_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln13_fu_178_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_1_fu_182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln13_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln13_1_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln13_1_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln9_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_1_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gps_translation_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gps_translation_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_52 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_52 <= add_ln8_1_fu_152_p2;
            end if; 
        end if;
    end process;

    is_neg_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                is_neg_reg_95 <= ap_const_lv1_0;
            elsif (((ap_const_lv1_1 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                is_neg_reg_95 <= is_neg_1_fu_212_p2;
            end if; 
        end if;
    end process;

    res_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                res_fu_48 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                res_fu_48 <= res_2_fu_204_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_3_reg_247 <= ap_sig_allocacmp_i_3;
                icmp_ln8_1_reg_257 <= icmp_ln8_1_fu_135_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln13_1_fu_182_p2 <= std_logic_vector(signed(sext_ln13_fu_178_p1) + signed(ap_const_lv9_1D0));
    add_ln13_fu_192_p2 <= std_logic_vector(unsigned(shl_ln13_fu_166_p2) + unsigned(sext_ln13_1_fu_188_p1));
    add_ln8_1_fu_152_p2 <= std_logic_vector(unsigned(i_3_reg_247) + unsigned(ap_const_lv3_1));
    add_ln8_fu_124_p2 <= std_logic_vector(unsigned(zext_ln8_fu_120_p1) + unsigned(s));
    and_ln8_fu_147_p2 <= (icmp_ln8_fu_141_p2 and icmp_ln8_1_reg_257);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_state2, and_ln8_fu_147_p2)
    begin
        if (((ap_const_lv1_0 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state2, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_52)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_52;
        end if; 
    end process;

    icmp_ln8_1_fu_135_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_3) < unsigned(n)) else "0";
    icmp_ln8_fu_141_p0 <= stored_msg_q0;
    icmp_ln8_fu_141_p2 <= "0" when (icmp_ln8_fu_141_p0 = ap_const_lv8_0) else "1";
    icmp_ln9_fu_160_p0 <= stored_msg_q0;
    icmp_ln9_fu_160_p2 <= "1" when (icmp_ln9_fu_160_p0 = ap_const_lv8_2D) else "0";
    is_neg_1_fu_212_p2 <= (is_neg_reg_95 or icmp_ln9_fu_160_p2);
    is_neg_out <= is_neg_reg_95;

    is_neg_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln8_fu_147_p2)
    begin
        if (((ap_const_lv1_0 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            is_neg_out_ap_vld <= ap_const_logic_1;
        else 
            is_neg_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_fu_198_p2 <= std_logic_vector(unsigned(add_ln13_fu_192_p2) + unsigned(shl_ln13_1_fu_172_p2));
    res_2_fu_204_p3 <= 
        res_fu_48 when (icmp_ln9_fu_160_p2(0) = '1') else 
        res_1_fu_198_p2;
    res_out <= res_fu_48;

    res_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln8_fu_147_p2)
    begin
        if (((ap_const_lv1_0 = and_ln8_fu_147_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            res_out_ap_vld <= ap_const_logic_1;
        else 
            res_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln13_1_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln13_1_fu_182_p2),32));

    sext_ln13_fu_178_p0 <= stored_msg_q0;
        sext_ln13_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln13_fu_178_p0),9));

    shl_ln13_1_fu_172_p2 <= std_logic_vector(shift_left(unsigned(res_fu_48),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln13_fu_166_p2 <= std_logic_vector(shift_left(unsigned(res_fu_48),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    stored_msg_address0 <= zext_ln8_1_fu_130_p1(7 - 1 downto 0);

    stored_msg_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stored_msg_ce0 <= ap_const_logic_1;
        else 
            stored_msg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln8_1_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln8_fu_124_p2),64));
    zext_ln8_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),7));
end behav;
